# Inferência Bayesiana - Markov Chain Monte Carlo

# Markov Chain

## Acontecimentos Condicionados 

~~~~
// 4 Nodos
var states = ['a', 'b', 'c', 'd'];
// Tabela de probabilidades
var transitionProbs = {a: [.48, .48, .02, .02],
                       b: [.48, .48, .02, .02],
                       c: [.02, .02, .48, .48],
                       d: [.02, .02, .48, .48]}

// Função de transição
var transition = function(state){
  return categorical({vs: states, ps: transitionProbs[state]})
}

var chain = function(state, n){
  return (n == 0 ? state : chain(transition(state), n-1))
}


// SAMPLING
print("10 steps:")
viz.hist(repeat(1000,function() {chain('a',10)}))
viz.hist(repeat(1000,function() {chain('c',10)}))

print("25 steps:")
viz.hist(repeat(1000,function() {chain('a',25)}))
viz.hist(repeat(1000,function() {chain('c',25)}))

print("50 steps:")
viz.hist(repeat(1000,function() {chain('a',50)}))
viz.hist(repeat(1000,function() {chain('c',50)}))
~~~~

## Distribuição Uniforme (Acontecimentos não condicionais)

~~~~
// 4 Nodos
var states = ['a', 'b', 'c', 'd'];
// Função de transição com distribuição unif.
var transition = function(state){
	return categorical({vs: states, ps: [.25, .25, .25, .25]})
	}

var chain = function(state, n){
	return (n == 0 ? state : chain(transition(state), n-1))
}


// SAMPLING
print("10 steps:")
viz.hist(repeat(1000,function() {chain('a',1)}))
viz.hist(repeat(1000,function() {chain('c',1)}))

print("25 steps:")
viz.hist(repeat(1000,function() {chain('a',25)}))
viz.hist(repeat(1000,function() {chain('c',25)}))

print("50 steps:")
viz.hist(repeat(1000,function() {chain('a',50)}))
viz.hist(repeat(1000,function() {chain('c',50)}))
~~~~

## Metropolis-Hastings
### Sem recurso ao Infer()

~~~~
var p = 0.7

//Modelo
var target_dist = function(x){
  return (x < 3 ? 0 : (p * Math.pow((1-p),(x-1))))
}

//Prob. Trans. Kernel
var proposal_fn = function(x){
  return (flip() ? x - 1 : x + 1)
}
var proposal_dist = function (x1, x2){
  return 0.5 
}


var accept = function (x1, x2){
 var p = Math.min(1, (target_dist(x2) * proposal_dist(x2, x1)) / (target_dist(x1) * proposal_dist(x1,x2)))
  return flip(p)
}
var transition = function(x){
  var proposed_x = proposal_fn(x)
  return (accept(x, proposed_x) ? proposed_x : x)
}


var mcmc = function(state, iterations){
  return ((iterations == 1) ? [state] : mcmc(transition(state), iterations-1).concat(state))
}

var chain = mcmc(3, 10000)
viz.table(chain)
~~~~

## Metropolis-Hastings
### Com recurso ao Infer()

~~~~
var geometric = function() {
  var p = 0.7
  return(bernoulli(p) ? 1 : 1 + geometric(p))
}


var inferencia = function(){
  var x = geometric();
  condition(x>=3)
  return x  
}


var m = Infer({method: "MCMC", 
               kernel: "MH",
               samples:10000},
               inferencia)

print('Histograma')
viz.table(m)
~~~~

# Hamiltonian Monte Carlo

~~~~
var sumModel = function() {
  var xs = repeat(10, function() {uniform(0, 1)})
  var targetSum = 5.0
  observe(Gaussian({mu: targetSum, sigma: 0.005}), sum(xs))
  return xs
}

var opts = {method: 'MCMC',
            samples: 5000,
            kernel: {MH}}
var post = Infer(opts, sumModel)

print(sample(post))
print(sample(post))
print(sample(post))
print(sample(post))
print(sample(post))
print(sample(post))
~~~~

~~~~
var sumModel = function() {
  var xs = repeat(10, function() {uniform(0, 1)})
  var targetSum = 5.0
  observe(Gaussian({mu: targetSum, sigma: 0.005}), sum(xs))
  return xs
}

var opts = {method: 'MCMC',
            samples: 5000,
            kernel: {HMC : { steps: 50, stepSize: 0.0025 }}}
var post = Infer(opts, sumModel)

print(sample(post))
print(sample(post))
print(sample(post))
print(sample(post))
print(sample(post))
print(sample(post))
~~~~ 
