//##############Exercício 1###################
console.log("Exercício 1")
var lista = repeat(10, flip) // Lista de 10 elementos (lista[n] = true || false)
//console.log(lista)

// Contar os verdadeiros
var num_of_true = sum(lista) // true = 1 && false = 0 soma todos os elementos da lista
console.log(num_of_true)

// Todos verdadeiros?
console.log("São todos verdadeiro?", all(function(x){return x==true}, lista))

//Algum verdadeiro
console.log("Algum é verdaeiro?", any(function(x){return x==true}, lista))
//############################################


//##############Exercício 2###################
console.log("Exercício 2")
//Função sem a capacidade de viciar a moeda
var moeda = function(){
  return flip()? "Head" : "Tail"
}

// Função geral para criar um moeda com um dado peso, as moedas podem ser viciadas
var make_coin = function(peso){
  // peso associado à prob de sair "head"
  return function() {
    flip(peso)? "Head" : "Tail"
  }
}

// Criar uma moeda nao viciada 50/50
var normal_coin = make_coin(0.5)

//Criação do histograma
viz.hist(repeat(1000, moeda))
//############################################


//##############Exercício 3###################
console.log("Exercício 3")
// Função geral para criar um moeda com um dado peso, as moedas podem ser viciadas
var make_coin = function(peso){
  return function() {
    flip(peso)? "Head" : "Tail"
  }
}

// Criar uma moeda viciada 70/30
var normal_coin = make_coin(0.3)

//Criação de uma tabela onde dá a probabilidade de sair cara ou coroa
viz.table(repeat(1000, normal_coin))
//############################################


//##############Exercício 4###################
console.log("Exercício 4.1")
/////////////////////USANDO O FLIP/////////////////////
// Função geral para criar um moeda com um dado peso, as moedas podem ser viciadas
var make_coin = function(peso){
  return function() {
    flip(peso)? "Head" : "Tail"
  }
}

//Função que retorna o número de caras após lancar a moeda 5x
var coins = function(n, w){
  //Criar um moeda viciada
  var coin = make_coin(w)
  //Criar um conjunto de n moedas
  var moedas = repeat(n, coin)
  //Função que cria uma nova lista de moedas num formato binário true=1 && false=1
  var moedas_bin = map(function(x) {return x=="Head"}, moedas)
  //Contar o numero de "Head"s
  var num_Head = sum(moedas_bin)
  return num_Head
}


//Criação do lancamento de 5 moedas com um peso de 0.42
var moedas = function(){
  return coins(5, 0.42)
}

//Repetir 100x o lancamento de 5 moedas e contar o numero de vezes que saiu cára
var moedas_hist = repeat(1000, moedas)

//Criação de um histograma
viz(moedas_hist, {xLabel:("Número de Caras"), yLabel:("\"Probabilidade\"")})

/////////////////////USANDO O BIN/////////////////////
console.log("Exercício 4.2")
//Distribuição binominal (Cara ou Coroa)
var pol_dist = Binomial({p: 0.5, n: 5})

//Criação de um histograma
viz(pol_dist, {xLabel:("Número de Caras"), yLabel:("Probabilidade")})
//############################################


//##############Exercício 5###################
console.log("Exercício 5")

//Função que retorna o numero num dado [1-6]
var dado = function(){
  var r = randomInteger(6) + 1 //randomInteger devolve um inteiro [1-6]
  return r
}

//Lancar o dado 1000x
var dados = repeat(1000, dado)

//Criação de um histograma
viz(dados, {xLabel:("Valor do dado"), yLabel:("\"Probabilidade\"")})
//############################################


//##############Exercício 6###################
console.log("Exercício 6")

//Função que retorna o numero num dado [1-6]
var dado = function(){
  var r = randomInteger(6) + 1 //randomInteger devolve um inteiro [1-6]
  return r
}

//Função para lancar multiplos dados e retornar a sua soma
var dados = function(n){
  var r = sum(repeat(n,dado))
  return r
}

//Criar 5 dados
var dices =function(){
  return dados(5)
}  

//Fazer o lancamento de 5 dados 1000x
var dados_hist = repeat(1000,dices)

//Criação de um histograma
viz(dados_hist, {xLabel:("Valor da soma dos dados"), yLabel:("\"Probabilidade\"")})
//############################################


//##############Exercício 7###################
console.log("Exercício 7")
//Funções auxiliares para cirar uma lista com os 52 nipes (52N)
var make_c = function(){return "C"}
var make_d = function(){return "D"}
var make_h = function(){return "H"}
var make_s = function(){return "S"}

// Lista com os 52 nipes
var nipes4 = repeat(13, make_c).concat(repeat(13, make_d)).
concat(repeat(13, make_h)).concat(repeat(13,make_s))

//Função auxiliar para cira uma lista com 52 numeros (52n)
var number = mapN(function(x){return x + 2}, 9).concat(10,10,10,11) //11 == ACE 

//Lista com os 52 numeros
var number4 = number.concat(number).concat(number).concat(number)

//Zip dos 52 nipes com os 52 numeros criando assim um baralho de 52 cartas [N, n]
var deck = zip(nipes4, number4)

//Função que retira uma carta do baralho de 52 cartas
var get_card = function(){
  var card = categorical({vs:deck})
  var new_deck = remove(card, deck)
  return [card, new_deck]
}

//
var game_stage = get_card()
var card_draw = game_stage[0]
var new_deck = game_stage[1] //baralho sem a carta
console.log("A carta retirada é: " + card_draw)
new_deck
//############################################


//##############Exercício 8###################
console.log("Exercicio 8")
//Funções auxiliares para cirar uma lista com os 52 nipes (52N)
var make_c = function(){return "C"}
var make_d = function(){return "D"}
var make_h = function(){return "H"}
var make_s = function(){return "S"}

// Lista com os 52 nipes
var nipes4 = repeat(13, make_c).concat(repeat(13, make_d)).
concat(repeat(13, make_h)).concat(repeat(13,make_s))

//Função auxiliar para cira uma lista com 52 numeros (52n)
var number = mapN(function(x){return x + 2}, 9).concat(10,10,10,11) //11 == ACE 

//Lista com os 52 numeros
var number4 = number.concat(number).concat(number).concat(number)

//Zip dos 52 nipes com os 52 numeros criando assim um baralho de 52 cartas [N, n]
var deck = zip(nipes4, number4)

//Função que retira uma carta de um dado baralho (deck_f)
var get_card = function(deck_f){
  var card = categorical({vs:deck_f})
  var new_deck = remove(card, deck_f)
  return [card, new_deck]
}

//Função que retira n cartas de um dado barlho (sem reposição)
var get_deck_n = function(cards_list, deck_f, n){
  
  if (n==0){
    return [cards_list, deck_f]
  }
  
  else{
    var game_stage = get_card(deck_f)
    cards_list.push(game_stage[0])
    var new_deck_f = game_stage[1]
    get_deck_n(cards_list, new_deck_f, n-1)
  }
}

//Modelo correspondete ao exercício
var modelo = function(){
  var list_cards = []
  var game_stage = get_deck_n(list_cards, deck, 5)
  return game_stage
}

var game_stage = modelo()
var cards = game_stage[0]
var new_deck = game_stage[1]

print(cards) // Nota se os prints nao aparecerem voltar a corre o codigo
print(new_deck)
//############################################