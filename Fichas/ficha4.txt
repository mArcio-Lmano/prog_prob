# Exercício 1

~~~~
var perc = {"ps":36.34,"psd":27.76,"cdu":6.33,"cds":4.22, "be":9.52,
  "pan":3.32,"chega":1.29,"il":1.29, "livre":1.09, "indecisos":8.84}

var sondagem = function(num_part){
  var L = _.values(perc)
  var probs = map(function(p){p/100}, L)
  var votos =  multinomial({ps: probs, n: num_part})
  var sondagem_r = _.fromPairs(_.zip( _.keys(perc), votos))
  return sondagem_r
}

var votos = sondagem(1000)
~~~~

# Exercício 2 & Exercício 3

~~~~
var perc = {"ps":36.34,"psd":27.76,"cdu":6.33,"cds":4.22, "be":9.52,
  "pan":3.32,"chega":1.29,"il":1.29, "livre":1.09, "indecisos":8.84}

var sondagem = function(num_part){
  var L = _.values(perc)
  var probs = map(function(p){p/100}, L)
  var votos =  multinomial({ps: probs, n: num_part})
  var sondagem_r = _.fromPairs(_.zip( _.keys(perc), votos))
  return sondagem_r
}

var votos = sondagem(10000)

var modelo = function(){
  var L = _.keys(votos).length
  var uni_dist_samples = mapN(function() {uniform({a:0, b:1})}, L)
  var norm_dist = map(function(p){p/sum(uni_dist_samples)}, uni_dist_samples)
  var dist = Multinomial({ps:norm_dist , n: 10000})
  observe(dist, _.values(votos))
  return _.fromPairs(_.zip(_.keys(perc), norm_dist))
}

viz.marginals(Infer({method: 'MCMC', samples: 5000, model: modelo}))
~~~~

# Exercício 4


~~~~
var perc = {"ps":36.34,"psd":27.76,"cdu":6.33,"cds":4.22, "be":9.52,
  "pan":3.32,"chega":1.29,"il":1.29, "livre":1.09, "indecisos":8.84}

var sondagem = function(num_part){
  var L = _.values(perc)
  var probs = map(function(p){p/100}, L)
  var votos =  multinomial({ps: probs, n: num_part})
  var sondagem_r = _.fromPairs(_.zip( _.keys(perc), votos))
  return sondagem_r
}

var votos = sondagem(10000)

var modelo = function(){
  var L = _.keys(votos).length
  var uni_dist_samples = mapN(function() {uniform({a:0, b:1})}, L)
  var norm_dist = map(function(p){p/sum(uni_dist_samples)}, uni_dist_samples)
  var dist = Multinomial({ps:norm_dist , n: 10000})
  observe(dist, _.values(votos))
  return _.fromPairs(_.zip(_.keys(perc), norm_ist))
}

var estimar_intervalo = function(dist, margem, low, high) {
  expectation(marginalize(dist, margem), function(p) {low < p && p < high})
}

var HDI = function(dist, margem, low, high, delta) {
  var p = estimar_intervalo(dist, margem, low, high)
  if (p <= 0.94) return [low, high]
  var A  = estimar_intervalo(dist, margem, low + delta, high)
  var B  = estimar_intervalo(dist, margem, low, high - delta)
  return A > B ? HDI(dist, margem, low + delta, high, delta) : HDI(dist, margem, low, high - delta, delta)
}

var print_intervals = function(dist, margens) {
  map(function(m) {
    print(m + ": " + HDI(dist, m, 0, 1, 0.005))
  }, margens)
}  
 
var dist = Infer({method: 'MCMC', samples: 5000, model: modelo})

print_intervals(dist, ["ps", "psd", "cdu", "cds", "be", "pan", "chega", "il", "livre", "indecisos"])
~~~~d
