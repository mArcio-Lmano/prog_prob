//##############Exercício 1###################
console.log("Exercício 1")

//Lancar dados c/repetição => x = numero de dados; y = numero de faces
var dice = function(x, y, dices_l){
  if (x == 0){
    return sum(dices_l)
  }
  else{
    var dado = randomInteger(y) + 1
    dices_l.push(dado)
    dice(x-1,y,dices_l)
  }
}

//Criação dos 5 modelos diferentes (com diferentes nº de dados e de faces)
var dado1 = function() {return dice(5,2,[])}
var dado2 = function() {return dice(2,5,[])}
var dado3 = function() {return dice(4,6,[])} 
var dado4 = function() {return dice(2,100,[])}
var dado5 = function() {return dice(100,2,[])}

//Repetir os 5 modelos 10000x cada um para para obter os dados para os histogramas
var dado1_h = repeat(10000,dado1)
var dado2_h = repeat(10000,dado2)
var dado3_h = repeat(10000,dado3)
var dado4_h = repeat(10000,dado4)
var dado5_h = repeat(10000,dado5)

//Histogramas
console.log("5d2")
viz(dado1_h, {xLabel: "Soma dos dados", yLabel: "\"Probabilidade\""})
console.log("2d5")
viz(dado2_h, {xLabel: "Soma dos dados", yLabel: "\"Probabilidade\""})
console.log("4d6")
viz(dado3_h, {xLabel: "Soma dos dados", yLabel: "\"Probabilidade\""})
console.log("2d100")
viz(dado4_h, {xLabel: "Soma dos dados", yLabel: "\"Probabilidade\""})
console.log("100d2")
viz(dado5_h, {xLabel: "Soma dos dados", yLabel: "\"Probabilidade\""})
//############################################


//##############Exercício 2###################
console.log("Exercício 2")

//Lancar dados s/repetição, x = nº de dados e y = nº de faces
var dice = function(x, y, dices_l){
  if (x == 0){
    return sum(dices_l)
  }
  else{
    var dado = randomInteger(y) + 1
    if (find(function(x){return x == dado}, dices_l) == undefined ){
      dices_l.push(dado)
    }
    dice(x-1,y,dices_l)
  }
}

//Criação dos 5 modelos diferentes
var dado1 = function() {return dice(5,2,[])}
var dado2 = function() {return dice(2,5,[])}
var dado3 = function() {return dice(4,6,[])} 
var dado4 = function() {return dice(2,100,[])}
var dado5 = function() {return dice(100,2,[])}

//Repetir os 5 modelos 10000x cada um para para obter os dados para os histogramas
var dado1_h = repeat(10000,dado1)
var dado2_h = repeat(10000,dado2)
var dado3_h = repeat(10000,dado3)
var dado4_h = repeat(10000,dado4)
var dado5_h = repeat(10000,dado5)

//Histogramas
console.log("5d2")
viz(dado1_h, {xLabel: "Soma dos dados", yLabel: "\"Probabilidade\""})
console.log("2d5")
viz(dado2_h, {xLabel: "Soma dos dados", yLabel: "\"Probabilidade\""})
console.log("4d6")
viz(dado3_h, {xLabel: "Soma dos dados", yLabel: "\"Probabilidade\""})
console.log("2d100")
viz(dado4_h, {xLabel: "Soma dos dados", yLabel: "\"Probabilidade\""})
console.log("100d2")
viz(dado5_h, {xLabel: "Soma dos dados", yLabel: "\"Probabilidade\""})
//############################################


//##############Exercício 3###################
console.log("Exercício 3")

//Função que dado o numero de dados (r=roll) o número de dados que pretendemos
// ficar (k=keep), uma lista onde serão guardados os valores lancados pelos dados
// (dices_l, deve ser inicializada como uma lista vazia) e um acumulador 
// (acc, serve para tansferir o valor do dado anterior no caso desse valor 
// ser 10)
var roll_keep = function(r, k, dices_l, acc){
  
  if (r == 0){ // Quando so lados forem todos lançados
    // Ordenar de forma decrescente
    var dices_l_s = sort(dices_l, gt)
    // Remover os ultimos elementos ficando so com os k maiores num
    dices_l_s.splice(k, dices_l_s.length-1)
    return sum(dices_l_s) // Retorna a soma dos k maiores valores
  }
  else{
    var dado = (randomInteger(10) + 1) + acc

    // Se o valor do dado for 10 lança o dado de novo e soma 10 (acc = dado),
    // descobrimos se foi lançado 10 ou não através do resto da divisão inteira
    if (dado%10==0){roll_keep(r,k,dices_l, dado)} 
    // Só quando o valor do dado for diferente de 10 é que juntamos à lista
    else{
      dices_l.push(dado)
      roll_keep(r-1,k,dices_l, 0)
    }
  }
}

//Criação dos nossos dados
//1k1
var roll_and_keep1 = function(){return roll_keep(1,1,[], 0)}
//3k1
var roll_and_keep2 = function(){return roll_keep(3,1,[], 0)}
//5k1
var roll_and_keep3 = function(){return roll_keep(5,1,[], 0)}
//7k2
var roll_and_keep4 = function(){return roll_keep(7,2,[], 0)}
//9k4
var roll_and_keep5 = function(){return roll_keep(9,4,[], 0)}

//Histogramas (Por algum motivo o yLabel não funciona)
console.log("1k1")
viz.hist(repeat(1000, roll_and_keep1), {xLabel: "Soma dos dados", yLabel: "\"Probabilidade\""})
console.log("3k1")
viz.hist(repeat(1000, roll_and_keep2), {xLabel: "Soma dos dados", yLabel: "\"Probabilidade\""})
console.log("5k1")
viz.hist(repeat(1000, roll_and_keep3), {xLabel: "Soma dos dados", yLabel: "\"Probabilidade\""})
console.log("7k2")
viz.hist(repeat(1000, roll_and_keep4), {xLabel: "Soma dos dados", yLabel: "\"Probabilidade\""})
console.log("9k4")
viz.hist(repeat(1000, roll_and_keep5), {xLabel: "Soma dos dados", yLabel: "\"Probabilidade\""})
//############################################


//##############Exercício 4###################
console.log("Exercício 4")

// Função que dado o número de dados a lancar (r=roll) e um
// target number (tn) e uma lista vazia, devolve o número de sucessos
// obtidos, esse número pode ser negativo
var Wod = function(r, tn, dices_l){

  if (r == 0){ // Quando os dados forem todos lançados
    return sum(dices_l) // Retorna o nº de sucessos
  }
  else{
    
    // Valor aleatorio do dado
    var dado = randomInteger(10) + 1
    
    if (dado >= tn){dices_l.push(1)} // Sucesso
    else if (dado == 1){dices_l.push(-1)} // Insucesso
    else {dices_l.push(0)} // O número de insucessos será removido ao número de sucessos
    
    Wod(r-1, tn, dices_l)
  }
}

// Criação de 5 modelos distintos (diferentes nº de dados e target number)
var world_of_dark1 = function(){return Wod(3, 9, [])} 
var world_of_dark2 = function(){return Wod(5, 10, [])}
var world_of_dark3 = function(){return Wod(2, 6, [])}
var world_of_dark4 = function(){return Wod(3, 6, [])}
var world_of_dark5 = function(){return Wod(5, 5, [])}

//Histogramas
console.log("3 Dados; 9 Target Nº")
viz(repeat(1000, world_of_dark1), {xLabel: "Nº de Sucessos", yLabel: "\"Probabilidade\""})
console.log("5 Dados; 10 Target Nº")
viz(repeat(1000, world_of_dark2), {xLabel: "Nº de Sucessos", yLabel: "\"Probabilidade\""})
console.log("2 Dados; 6 Target Nº")
viz(repeat(1000, world_of_dark3), {xLabel: "Nº de Sucessos", yLabel: "\"Probabilidade\""})
console.log("3 Dados; 6 Target Nº")
viz(repeat(1000, world_of_dark4), {xLabel: "Nº de Sucessos", yLabel: "\"Probabilidade\""})
console.log("5 Dados; 5 Target Nº")
viz(repeat(1000, world_of_dark5), {xLabel: "Nº de Sucessos", yLabel: "\"Probabilidade\""})
//############################################


//##############Exercício 5###################
console.log("Exercício 5")

// Função que dado o número de dados a lancar (r=roll) e um
// target number (tn) e uma lista vazia, devolve o número de sucessos
// obtidos, esse número pode ser negativo
var Wod = function(r, tn, dices_l){
  
  if (r == 0){ // Quando os dados forem todos lançados 
    // Retorna uma lista de dois elementos, [0]-> nº de sucessos, [1]-> Targer number
    return [sum(dices_l), tn] 
  }    
  else{
    
    // Valor aleatorio do dado
    var dado = randomInteger(10) + 1
    
    if (dado >= tn){dices_l.push(1)} // Sucesso
    else if (dado == 1){dices_l.push(-1)} // Insucesso
    else {dices_l.push(0)} // O número de insucessos será removido ao número de sucessos
    
    Wod(r-1, tn, dices_l)
  }
}

// Criação de um modelo onde se lança 10 dados, para target numbers aleatorios (prob. uniforme ente 2 e 10) e 1000 samples
var world_of_dark = repeat(1000, function(){return Wod(10, categorical({ps:repeat(9, function(){return 1/9}), vs:mapN(function(x){return x + 2}, 9)}), [])})

// Heat Map
console.log("Eixo Vertical: Targer Number; Eixo Horizontal: Nº de Sucessos")
viz.heatMap(world_of_dark)
//############################################


//##############Exercício 6###################
console.log("Exercício 6")

// Função que dado o número de dados a lancar (r=roll) e um
// target number (tn) e uma lista vazia, devolve o número de sucessos
// obtidos, esse número pode ser negativo
var Wod = function(r, tn, dices_l){
                                                       
  if (r == 0){ // Quando os dados forem todos lançados 
    // Retorna uma lista de dois elementos, [0]-> nº de sucessos, [1]-> nº dados lançados
    return [sum(dices_l), dices_l.length]
  }    
  else{
    
    // Valor aleatorio do dado
    var dado = randomInteger(10) + 1
    
    if (dado >= tn){dices_l.push(1)} // Sucesso
    else if (dado == 1){dices_l.push(-1)} // Insucesso
    else {dices_l.push(0)} // O número de insucessos será removido ao número de sucessos
    
    Wod(r-1, tn, dices_l)
  }
}

// Criação de um modelo onde se lança um nº aleatório de dados(prob. uniforme ente 1 e 10), para um target numbers de 9 e 1000 samples
var world_of_dark = repeat(1000, function(){return Wod(categorical({ps:repeat(10, function(){return 1/10}), vs:mapN(function(x){return x + 1}, 10)}), 9, [])})

// Heat Map
console.log("Eixo Vertical: Nº de dados lançados; Eixo Horizontal: Nº de Sucessos")
viz.heatMap(world_of_dark)
//############################################


//##############Exercício 7###################
console.log("Exercício 7")

//Função que dado o numero de dados (r=roll) o número de dados que pretendemos
// ficar (k=keep), uma lista onde serão guardados os valores lancados pelos dados
// (dices_l, deve ser inicializada como uma lista vazia) e um acumulador 
// (acc, serve para tansferir o valor do dado anterior no caso desse valor 
// ser 10)
var roll_keep = function(r, k, dices_l, acc){
  
  if (r == 0){ // Quando so lados forem todos lançados
    // Ordenar de forma decrescente
    var dices_l_s = sort(dices_l, gt)
    // Remover os ultimos elementos ficando so com os k maiores num
    dices_l_s.splice(k, dices_l_s.length-1)
    return sum(dices_l_s) // Retorna a soma dos k maiores valores
  }
  else{
    var dado = (randomInteger(10) + 1) + acc

    // Se o valor do dado for 10 lança o dado de novo e soma 10 (acc = dado),
    // descobrimos se foi lançado 10 ou não através do resto da divisão inteira
    if (dado%10==0){roll_keep(r,k,dices_l, dado)} 
    // Só quando o valor do dado for diferente de 10 é que juntamos à lista
    else{
      dices_l.push(dado)
      roll_keep(r-1,k,dices_l, 0)
    }
  }
}

// Criação do nosso modelo (Jogador1 vs Jogador2)
var modelo = function(){
  
  // Defenição do nº de samples
  var samples = 1000

  // Distribuição Uniforme para os skills e traits (distribuição uni 1-10)
  var stat = function(){
    return categorical({ps: repeat(10, function(){return 1/10}), vs: mapN(function(x){return x+1}, 10)})
  }
  
  // Atribuição das skills e traits de ambos os jogadores segundo uma distribuiçao defenida em cima na (stat)
  var skill1 = stat()
  var trait1 = stat()
  
  var skill2 = stat()
  var trait2 = stat()
  
  // Como vamos calcular a média não temos interesse em ter um modelo onde ambos os jogadores possuem os mesmos
  // skills e traits, assim evitamos bug na hora da vizualização (viz)
  if (skill1 == skill2 && trait1 == trait2) {modelo()} // Chamar o modelo recursivamente ate os jogadores terem stats diferentes
  else{
  
    // array onde serão guardados os skills e traits dos jogadores para representar 
    var xs = [[skill1, trait1], [skill2, trait2]]
    
    // Calcular as medias de power de cada jogador repetir samplesx e dividir por samples para obter um valor médio
    var power1 = sum(repeat(samples, function(){return roll_keep(skill1+trait1, trait1, [])}))/samples 
    var power2 = sum(repeat(samples, function(){return roll_keep(skill2+trait2, trait2, [])}))/samples
  
    // array onde serão guardados os valores de power de cada jogador
    var ys = [power1, power2]
  
    // Visualização 
    viz.bar(xs, ys, {xLabel: "Skill1, Trait", yLabel: "Average Power"})
  }
}

// Chamar o modelo defenido em cima
modelo()
//############################################


//##############Exercício 8###################
console.log("Exercício 8")

// Função que dado o número de dados a lancar (r=roll) e um
// target number (tn) e uma lista vazia, devolve o número de sucessos
// obtidos, esse número pode ser negativo
var Wod = function(r, tn, dices_l){
                                                       
  if (r == 0){ // Quando os dados forem todos lançados 
    // Retorna o nº de sucessos
    return sum(dices_l)
  }    
  else{
    
    // Valor aleatorio do dado
    var dado = randomInteger(10) + 1
    
    if (dado >= tn){dices_l.push(1)} // Sucesso
    else if (dado == 1){dices_l.push(-1)} // Insucesso
    else {dices_l.push(0)} // O número de insucessos será removido ao número de sucessos
    
    Wod(r-1, tn, dices_l)
  }
}

// Criação do nosso modelo (Jogador1 vs Jogador2)
var modelo = function(){
  // Nº de samples
  var samples = 1000
  // Distribuição Uniforme para os skills e traits
  var stat = function(){
    return categorical({ps: repeat(10, function(){return 1/10}), vs: mapN(function(x){return x+1}, 10)})
  }
  
  // Atribuir um nº aleatorio para o taret number, entre 2-10
  var target_num = randomInteger(9) + 2
  
  // Print do target number
  console.log("Para target number = " + target_num)
  
  // Atribuição dos atributos e disciplinas de ambos os jogadores segundo uma distribuiçao defenida em cima na (stat) 
  var atrib1 = stat()
  var disci1 = stat()
  
  var atrib2 = stat()
  var disci2 = stat()
 
  // Como vamos calcular a média não temos interesse em ter um modelo onde ambos os jogadores possuem os mesmos
  // atributos e disciplinas, assim evitamos bug na hora da vizualização (viz)
  if (atrib1 == atrib2 && disci1 == disci2){modelo()}
  else{
    
    // array onde serão guardados os skills e traits dos jogadores para representar
    var xs = [[atrib1, disci1], [atrib2, disci2]]
  
    // Calcular as medias de power de cada jogador repetir samplesx e dividir por samples para obter um valor médio
    var power1 = sum(repeat(samples, function(){return Wod(atrib1+disci1, target_num, [])}))/samples
    var power2 = sum(repeat(samples, function(){return Wod(atrib2+disci2, target_num, [])}))/samples
  
    // array onde serão guardados os valores de power de cada jogador
    var ys = [power1, power2]
  
    // Visualização
    viz.bar(xs, ys, {xLabel: "Atributo+Discipline", yLabel: "Nº Súcessos médio"})
  }
}

modelo()
//############################################